---
import '@fontsource-variable/open-sans/wdth.css'
import '@fontsource-variable/open-sans/wdth-italic.css'

import { AsyncDatabase } from 'promised-sqlite3'
import ContentWithSearch from '../components/ContentWithSearch'
import Timestamp from '../components/Timestamp'
import type { Content } from '../components/Article'
import { isAfter, parseISO, subHours } from 'date-fns'
import { partition } from 'lodash-es'

const db = await AsyncDatabase.open(import.meta.env.DB_PATH ?? './digest.db')
const rows = await db.all<Content>(`
  SELECT contentId as id, sourceId, url, sourceURL, title, contentTimestamp, contentSummary, shortName as sourceShortName
  FROM content
  LEFT JOIN source USING (sourceId)
  LEFT JOIN summary USING (contentId)
  WHERE content.timestamp > datetime('now', '-1 day') AND parentContentId IS NULL
  ORDER BY content.timestamp DESC
`)

const rowsWithChildren = await Promise.all(
  rows.map(async (row) => {
    const childContent = await db.all<Content>(
      `
      SELECT contentId as id, sourceId, url, sourceURL, title, contentTimestamp, contentSummary, shortName as sourceShortName
      FROM content
      LEFT JOIN source USING (sourceId)
      LEFT JOIN summary USING (contentId)
      WHERE parentContentId = $parentContentId
    `,
      { $parentContentId: row.id },
    )
    return { ...row, childContent }
  }),
)

const now = Date.now()
const newPodcastThreshold = subHours(now, 12)

const newPodcasts = rowsWithChildren.filter(
  ({ sourceId, contentTimestamp }) =>
    sourceId.startsWith('podcast:') &&
    isAfter(parseISO(contentTimestamp + 'Z'), newPodcastThreshold),
)

const lastUpdate = await db.get<{ timestamp: string }>(
  'SELECT timestamp FROM updateLog WHERE sourceId = "system" ORDER BY timestamp DESC LIMIT 1',
)
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="noindex, nofollow" />
    <title>Max's Digest</title>
  </head>
  <body>
    <header>
      <h1>Max's Digest</h1>
      <span class="updated">
        <Timestamp
          client:load
          dateTime={parseISO(lastUpdate.timestamp + 'Z')}
          prefix="updated "
        />
      </span>
    </header>
    <main>
      <ContentWithSearch
        client:load
        rows={rowsWithChildren}
        podcasts={newPodcasts}
      />
    </main>
  </body>

  <style>
    :root {
      --source-width: 12rem;
      --content-width: 42rem;
      --color-bg: white;
      --color-text: black;
      --color-link: blue;
      --accent: #f6f6f6;
      --accent-border: #333;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        --color-bg: #111010;
        --color-text: #c5b9b9;
        --color-link: #7c7caa;
        --accent: #222;
        --accent-border: #333;
      }
    }

    html {
      scrollbar-gutter: stable;
    }

    body {
      font-family: 'Open Sans Variable', sans-serif;
      max-width: var(--content-width);
      margin: 0 auto;
      padding: 0 16px;
      background: var(--color-bg);
      color: var(--color-text);
    }

    h1 {
      font-stretch: 85%;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    main {
      article {
        position: relative;
        margin-bottom: 2rem;

        h2,
        .source {
          line-height: 2rem;
        }

        h2 {
          gap: 0.5em;
          margin-top: 0;
          margin-bottom: 0.5rem;
        }

        .info {
          display: flex;
          align-items: baseline;
          gap: 0.5rem;
        }

        .domain {
          font-size: 0.85rem;
          font-weight: normal;
          margin-left: 1em;
        }

        time {
          font-size: 0.85em;
          opacity: 0.4;
        }

        .source,
        .podcast-name {
          font-weight: 600;
          color: var(--color-text);
          opacity: 0.6;
        }

        .source,
        h2,
        .podcast-name {
          font-stretch: 85%;
          overflow: hidden;
          text-overflow: ellipsis;
        }

        .podcast {
          margin: 0.25em 0;
        }

        a {
          text-decoration: none;
          color: var(--color-link);
        }

        .icon {
          width: 18px;
          height: 18px;
          align-self: center;
          opacity: 0.9;
        }

        .summary {
          margin: 0.5rem 0;
        }

        p {
          margin: 0.5em 0;
        }

        ul {
          padding-left: 1em;
          margin-bottom: 0;
        }

        li {
          margin: 0.35em 0;
        }

        .child {
          background: var(--accent);
          padding: 0.25rem 1rem;
          margin: 0.5rem 0;

          .summary {
            margin: 0;
          }

          ul {
            margin: 0;
          }
        }
      }
    }

    body {
      h1,
      .search input {
        margin-bottom: 2rem;
      }

      header {
        display: flex;
        align-items: baseline;
        gap: 1rem;

        .updated {
          font-size: 0.9em;
          opacity: 0.7;
        }
      }

      .search {
        display: flex;

        input {
          display: flex;
          flex: 1;
          background: var(--accent);
          color: var(--color-text);
          border: 2px solid var(--accent-border);
          border-radius: 4px;
          box-sizing: content-box;
          padding: 1rem;
          font-size: 1.15rem;
        }
      }
    }
  </style>
</html>
