---
import '@fontsource-variable/open-sans/wdth.css'
import '@fontsource-variable/open-sans/wdth-italic.css'
import openSansWoff2 from '@fontsource-variable/open-sans/files/open-sans-latin-wdth-normal.woff2?url'

import { ViewTransitions } from 'astro:transitions'
import ContentWithSearch from './ContentWithSearch'
import Timestamp from './Timestamp'
import { type Content } from './Article'
import { filterContent } from '@shared/filterContent'
import { isAfter, parseISO, subHours } from 'date-fns'
import { partition } from 'lodash-es'
import AutoUpdateBanner from './AutoUpdateBanner'
import { getLastUpdateTimestamp, openDB } from 'src/dbUtils'

interface Props {
  showExcluded?: boolean
}

const db = await openDB()

const rows = await db.all<Content & { childContent: string }>(
  `SELECT content.contentId as id, content.sourceId, content.url, content.hash, content.title, content.author, content.timestamp as timestamp, content.contentTimestamp, content.content, content.sourceURL, summary.contentSummary, classifyResult, source.shortName as sourceShortName, json_group_array(json_object(
    'id', childContent.contentId,
    'url', childContent.url,
    'title', childContent.title,
    'timestamp', childContent.timestamp,
    'contentTimestamp', childContent.contentTimestamp,
    'sourceId', childContent.sourceId,
    'sourceURL', childContent.sourceURL,
    'contentSummary', childSummary.contentSummary,
    'sourceShortName', source.shortName
  )) FILTER (where childContent.contentId IS NOT NULL) as childContent
  FROM content
  LEFT JOIN source USING (sourceId)
  LEFT JOIN summary USING (contentId)
  LEFT JOIN classify USING (contentId)
  LEFT JOIN content childContent ON childContent.parentContentId = content.contentId
  LEFT JOIN summary childSummary ON childSummary.contentId = childContent.contentId
  WHERE content.timestamp > datetime('now', '-1 day') AND content.parentContentId IS NULL
  GROUP BY content.contentId
  ORDER BY content.timestamp DESC`,
)

const parsedRows = rows.map((content) => ({
  ...content,
  childContent: JSON.parse(content.childContent),
}))

const [filteredRows, excludedRows] = partition(parsedRows, (row) => {
  if (row.sourceId.startsWith('feed:') && row.classifyResult) {
    return filterContent(JSON.parse(row.classifyResult))
  }

  return true
})

const rowsWithChildren = await Promise.all(
  filteredRows.map(async (row) => {
    const childContent = await db.all<Content>(
      `
      SELECT contentId as id, sourceId, url, sourceURL, title, contentTimestamp, contentSummary, shortName as sourceShortName
      FROM content
      LEFT JOIN source USING (sourceId)
      LEFT JOIN summary USING (contentId)
      WHERE parentContentId = $parentContentId
    `,
      { $parentContentId: row.id },
    )
    return { ...row, childContent }
  }),
)

const now = Date.now()
const newPodcastThreshold = subHours(now, 12)

const newPodcasts = rowsWithChildren.filter(
  ({ sourceId, contentTimestamp }) =>
    sourceId.startsWith('podcast:') &&
    isAfter(parseISO(contentTimestamp + 'Z'), newPodcastThreshold),
)

const lastUpdate = await getLastUpdateTimestamp(db)

const { showExcluded = false } = Astro.props
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="noindex, nofollow" />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={openSansWoff2}
      crossorigin="anonymous"
    />
    <title>Max's Digest</title>
    <ViewTransitions />
  </head>
  <body>
    <header>
      <h1><a href="/">Max's Digest</a></h1>
      <div class="status">
        <a class="excluded-count" href="/excluded"
          >{excludedRows.length} filtered</a
        >
        <span class="updated">
          updated
          <Timestamp client:load dateTime={parseISO(lastUpdate + 'Z')} /></span
        >
      </div>
    </header>
    <main>
      <ContentWithSearch
        client:load
        rows={showExcluded ? excludedRows : filteredRows.slice(0, 100)}
        podcasts={showExcluded ? [] : newPodcasts}
        showClassifyInfo={showExcluded}
      />
      <AutoUpdateBanner client:load />
    </main>
    <script src="../scripts/fastRenderTimestamps.ts"></script>
    <style>
      :root {
        --source-width: 12rem;
        --content-width: 42rem;
        --color-bg: white;
        --color-text: black;
        --color-link: blue;
        --accent: #f6f6f6;
        --accent-border: #333;
        --update-bg: #ffb64f;
      }

      @media (prefers-color-scheme: dark) {
        :root {
          --color-bg: #111010;
          --color-text: #c5b9b9;
          --color-link: #7c7caa;
          --accent: #222;
          --accent-border: #333;
          --update-bg: #cd852d;
        }
      }

      html {
        scrollbar-gutter: stable;
      }

      body {
        font-family: 'Open Sans Variable', sans-serif;
        max-width: var(--content-width);
        margin: 0 auto;
        padding: 0 16px;
        background: var(--color-bg);
        color: var(--color-text);
      }

      h1 {
        font-stretch: 85%;
        font-weight: 600;
        margin-bottom: 1rem;

        a {
          color: var(--color-text);
          text-decoration: none;
        }
      }

      main {
        article {
          position: relative;
          margin-bottom: 2rem;

          h2,
          .source {
            line-height: 2rem;
          }

          h2 {
            gap: 0.5em;
            margin-top: 0;
            margin-bottom: 0.5rem;
          }

          .info {
            display: flex;
            align-items: baseline;
            gap: 0.25rem 0.5rem;

            &.classify {
              font-size: 0.85rem;
              opacity: 0.7;
              flex-wrap: wrap;
            }
          }

          .domain {
            font-size: 0.85rem;
            font-weight: normal;
            margin-left: 1em;
          }

          time {
            font-size: 0.85em;
            opacity: 0.4;
          }

          .source,
          .podcast-name {
            font-weight: 600;
            color: var(--color-text);
            opacity: 0.6;
          }

          .source,
          h2,
          .podcast-name {
            font-stretch: 85%;
            overflow: hidden;
            text-overflow: ellipsis;
          }

          .podcast {
            margin: 0.25em 0;
          }

          a {
            text-decoration: none;
            color: var(--color-link);
          }

          .summary {
            margin: 0.5rem 0;
          }

          p {
            margin: 0.5em 0;
          }

          ul {
            padding-left: 1em;
            margin-bottom: 0;
          }

          li {
            margin: 0.35em 0;
          }

          .child {
            background: var(--accent);
            padding: 0.25rem 1rem;
            margin: 0.5rem 0;

            .summary {
              margin: 0;
            }

            ul {
              margin: 0;
            }
          }
        }
      }

      body {
        h1,
        .search input {
          margin-bottom: 2rem;
        }

        header {
          display: flex;
          align-items: baseline;
          gap: 1rem;

          h1 {
            flex-shrink: 0;
          }

          .status {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
          }

          .updated,
          .excluded-count {
            font-size: 0.9em;
            opacity: 0.7;
          }

          .excluded-count {
            color: var(--color-text);
            text-decoration: none;

            &:hover {
              text-decoration: underline;
            }
          }
        }

        .search {
          display: flex;

          input {
            display: flex;
            flex: 1;
            background: var(--accent);
            color: var(--color-text);
            border: 2px solid var(--accent-border);
            border-radius: 4px;
            box-sizing: content-box;
            padding: 1rem;
            font-size: 1.15rem;
          }
        }

        .update-banner {
          position: fixed;
          left: 50%;
          bottom: 16px;
          height: 3rem;
          padding: 0 32px;
          transform: translateX(-50%);
          display: flex;
          align-items: center;
          justify-content: center;
          background: var(--update-bg);
          color: rgba(0, 0, 0, 0.75);
          font-weight: 500;
          border-radius: 8px;
          text-decoration: none;
        }
      }

      @media (max-width: 450px) {
        header {
          align-items: center;

          .status {
            gap: 0;
            justify-content: flex-end;
            margin-top: 0.75rem;
          }
        }

        body {
          .update-banner {
            bottom: 8px;
            width: calc(100% - 16px);
            padding: 0;
          }
        }
      }
    </style>
  </body>
</html>
